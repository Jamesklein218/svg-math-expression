export type CharacterFormat = {
  padding: number;
  width: number;
  formatString: string;
  formatValues: Array<number>;
}

const CharacterFormatMap: {[key: string]: CharacterFormat} = {
  '0': {
    padding: 24.816,
    width: 49,
    formatString:
      " M  {}  48.576  C  {}  48.576  {}  37.824  {}  24.256  C  {}  10.624  {}  0.895996  {}  0.895996  C  {}  0.895996  {}  10.624  {}  24.256  C  {}  37.824  {}  48.576  {}  48.576  Z  M  {}  24.64  C  {}  33.6  {}  40.448  {}  40.448  C  {}  40.448  {}  33.6  {}  24.64  C  {}  15.68  {}  9.088  {}  9.088  C  {}  9.088  {}  15.68  {}  24.64  Z ",
    formatValues: [
      24.816, 38.384, 48.944, 48.944, 48.944, 38.384, 24.816, 11.184, 0.688,
      0.688, 0.688, 11.184, 24.816, 40.752, 40.752, 34.992, 24.752, 14.576,
      8.816, 8.816, 8.816, 14.576, 24.816, 34.928, 40.752, 40.752,
    ],
  },
  '1': {
    padding: 19.608,
    width: 20,
    formatString:
      " M  {}  47  V  15.704  C  {}  6.104  {}  0.471996  {}  0.471996  H  {}  V  8.6  H  {}  C  {}  8.6  {}  11.096  {}  15.704  V  47  H  {}  Z ",
    formatValues: [
      19.608, 19.608, 14.36, 5.016, 0.536, 5.016, 9.24, 11.544, 11.544, 19.608,
    ],
  },
  '2': {
    padding: 44.704,
    width: 46,
    formatString:
      " M  {}  47  V  38.872  H  {}  V  32.792  C  {}  28.824  {}  26.776  {}  26.776  H  {}  C  {}  26.776  {}  21.208  {}  13.528  C  {}  6.04  {}  0.471996  {}  0.471996  H  {}  V  8.6  H  {}  C  {}  8.6  {}  10.776  {}  14.296  C  {}  17.816  {}  19.928  {}  19.928  H  {}  C  {}  19.928  {}  24.344  {}  33.368  V  47  H  {}  Z ",
    formatValues: [
      44.704, 7.712, 7.712, 10.016, 14.368, 31.264, 40.096, 45.472, 45.472,
      45.472, 40.416, 31.2, 0.416, 31.2, 34.848, 37.088, 37.088, 37.088, 34.72,
      31.2, 14.368, 5.024, 0.0320001, 0.0320001, 44.704,
    ],
  },
  '3': {
    padding: 32.816,
    width: 48,
    formatString:
      " M  {}  47  C  {}  47  {}  41.368  {}  32.92  C  {}  27.48  {}  23.768  {}  22.424  C  {}  21.336  {}  18.392  {}  12.504  C  {}  4.568  {}  0.471996  {}  0.471996  H  {}  V  8.536  H  {}  C  {}  8.536  {}  10.008  {}  14.296  C  {}  18.328  {}  19.928  {}  19.928  H  {}  V  26.776  H  {}  C  {}  26.776  {}  28.888  {}  32.728  C  {}  36.76  {}  38.872  {}  38.872  H  {}  V  47  H  {}  Z ",
    formatValues: [
      32.816, 41.904, 47.792, 47.792, 47.792, 44.72, 40.496, 43.952, 46.896,
      46.896, 46.896, 40.944, 31.92, 1.136, 30.32, 35.696, 38.704, 38.704,
      38.704, 36.528, 31.92, 11.952, 32.496, 37.04, 39.536, 39.536, 39.536,
      35.952, 30.832, 0.944, 32.816,
    ],
  },
  '4': {
    padding: 42.76,
    width: 50,
    formatString:
      " M  {}  47  V  34.584  H  {}  V  26.776  H  {}  V  0.471996  H  {}  V  26.776  H  {}  C  {}  26.776  {}  24.984  {}  19.608  V  0.471996  H  {}  V  19.672  C  {}  29.976  {}  34.584  {}  34.584  H  {}  V  47  H  {}  Z ",
    formatValues: [
      42.76, 49.48, 42.76, 34.632, 15.368, 10.504, 8.2, 8.2, 0.072, 0.072, 5.64,
      15.368, 34.632, 42.76,
    ],
  },
  '5': {
    padding: 34.912,
    width: 50,
    formatString:
      " M  {}  47  C  {}  47  {}  41.176  {}  33.368  C  {}  24.344  {}  19.928  {}  19.928  H  {}  V  8.6  H  {}  V  0.471996  H  {}  V  26.776  H  {}  C  {}  26.776  {}  28.824  {}  32.792  C  {}  36.44  {}  38.872  {}  38.872  H  {}  V  47  H  {}  Z ",
    formatValues: [
      34.912, 44.576, 49.312, 49.312, 49.312, 44.256, 34.912, 8.416, 47.072,
      0.0320001, 34.912, 39.2, 41.632, 41.632, 41.632, 39.264, 34.912,
      0.0320001, 34.912,
    ],
  },
  '6': {
    padding: 36.272,
    width: 51,
    formatString:
      " M  {}  47  C  {}  47  {}  41.88  {}  32.856  C  {}  23.896  {}  19.864  {}  19.864  H  {}  C  {}  11.992  {}  8.6  {}  8.6  H  {}  V  0.471996  H  {}  C  {}  0.471996  {}  7.384  {}  23.256  C  {}  39.192  {}  47  {}  47  H  {}  Z  M  {}  26.776  C  {}  26.776  {}  28.696  {}  32.536  C  {}  36.568  {}  38.872  {}  38.872  H  {}  C  {}  38.872  {}  35.16  {}  26.776  H  {}  Z ",
    formatValues: [
      36.272, 45.04, 50.416, 50.416, 50.416, 45.168, 36.272, 9.008, 10.032,
      14.448, 21.808, 48.496, 21.808, 8.688, 0.688, 0.688, 0.688, 8.688, 21.808,
      36.272, 35.504, 40.176, 42.608, 42.608, 42.608, 40.112, 35.504, 21.808,
      14.256, 9.776, 8.944, 35.504,
    ],
  },
  '7': {
    padding: 11.76,
    width: 46,
    formatString:
      " M  {}  47  L  {}  8.152  C  {}  6.616  {}  5.528  {}  4.312  C  {}  2.2  {}  0.471996  {}  0.471996  H  {}  V  8.6  H  {}  L  {}  47  H  {}  Z ",
    formatValues: [
      11.76, 43.504, 44.784, 45.04, 45.04, 45.04, 43.568, 39.92, 0.816, 33.008,
      1.2, 11.76,
    ],
  },
  '8': {
    padding: 36.232,
    width: 52,
    formatString:
      " M  {}  47  C  {}  47  {}  41.432  {}  32.92  C  {}  27.48  {}  23.768  {}  22.424  C  {}  21.336  {}  18.392  {}  12.504  C  {}  4.568  {}  0.471996  {}  0.471996  H  {}  C  {}  0.471996  {}  4.568  {}  12.504  C  {}  18.392  {}  21.336  {}  22.424  C  {}  23.768  {}  27.48  {}  32.92  C  {}  41.432  {}  47  {}  47  H  {}  Z  M  {}  26.776  C  {}  26.776  {}  28.952  {}  32.792  C  {}  36.824  {}  38.872  {}  38.872  H  {}  C  {}  38.872  {}  36.824  {}  32.792  C  {}  28.952  {}  26.776  {}  26.776  H  {}  Z  M  {}  8.536  C  {}  8.536  {}  10.008  {}  14.296  C  {}  18.328  {}  19.928  {}  19.928  H  {}  C  {}  19.928  {}  18.328  {}  14.296  C  {}  10.008  {}  8.536  {}  8.536  H  {}  Z ",
    formatValues: [
      62.857, 71.945, 77.833, 77.833, 77.833, 74.761, 70.537, 73.993, 77.001,
      77.001, 77.001, 70.985, 61.961, 42.761, 33.737, 27.785, 27.785, 27.785,
      30.729, 34.185, 29.961, 26.889, 26.889, 26.889, 32.777, 41.865, 62.857,
      62.537, 67.081, 69.641, 69.641, 69.641, 65.993, 60.873, 43.849, 38.729,
      35.081, 35.081, 35.081, 37.641, 42.185, 62.537, 60.425, 65.737, 68.745,
      68.745, 68.745, 66.569, 61.961, 42.761, 38.153, 35.977, 35.977, 35.977,
      38.985, 44.297, 60.425,
    ],
  },
  '9': {
    padding: 29.296,
    width: 51,
    formatString:
      " M  {}  47  C  {}  47  {}  40.088  {}  24.216  C  {}  8.28  {}  0.471996  {}  0.471996  H  {}  C  {}  0.471996  {}  6.744  {}  15  C  {}  24.6  {}  28.696  {}  28.696  H  {}  C  {}  35.864  {}  38.872  {}  38.872  H  {}  V  47  H  {}  Z  M  {}  15.448  C  {}  11.096  {}  8.664  {}  8.664  H  {}  C  {}  8.664  {}  12.76  {}  21.912  H  {}  C  {}  21.912  {}  19.864  {}  15.448  Z ",
    formatValues: [
      29.296, 42.352, 50.416, 50.416, 50.416, 42.352, 29.296, 14.128, 5.872,
      0.688, 0.688, 0.688, 5.68, 14.128, 41.904, 40.624, 36.272, 29.296, 5.936,
      29.296, 8.944, 8.944, 11.44, 15.472, 29.296, 37.168, 41.648, 42.224,
      15.472, 11.376, 8.944, 8.944,
    ],
  },
  "+": {
    padding: 20.832,
    width: 37,
    formatString:
      " M  {}  {}  V  {}  H  {}  V  {}  H  {}  V  {}  H  {}  V  {}  H  {}  V  {}  H  {}  V  {}  H  {}  Z ",
    formatValues: [
      20.832, 36.432, 21.008, 36.128, 15.632, 20.832, 0.271999, 15.392, 15.632,
      0.0320001, 21.008, 15.392, 36.432, 20.832,
    ],
  },
  "-": {
    padding: 16.216,
    width: 17,
    formatString: " M  {}  {}  V  {}  H  {}  V  {}  H  {}  Z ",
    formatValues: [16.216, 6.072, 0.631998, 0.856, 6.072, 16.216],
  },
  "=": {
    padding: 36.128,
    width: 37,
    formatString:
      " M  {}  {}  V  {}  H  {}  V  {}  H  {}  Z  M  {}  {}  V  {}  H  {}  V  {}  H  {}  Z ",
    formatValues: [
      36.128, 5.432, 0.0559998, 0.0320001, 5.432, 36.128, 36.128, 22.712,
      17.336, 0.0320001, 22.712, 36.128,
    ],
  },
  " ": {
    padding: 0,
    width: 18.8125,
    formatString: "",
    formatValues: [],
  },
};


function format(
  str: string,
  args: number[],
  callback: (x: number) => number = (x) => x,
) {
  var i: number = 0;
  return str.replace(/{}/g, (substr) => {
    if (i >= args.length) return "";
    return callback(args[i++]).toString();
  });
}

function expressionToSVG(expression: string): string {
  let path: string = "";
  let offset: number = 0;
  for (let char of expression) {
    const element: CharacterFormat | undefined = CharacterFormatMap[char];
    if (!element) throw "Invalid character";
    path += format(element.formatString, element.formatValues, (x) => x + offset);
    offset += element.padding * 2 + element.width;
  }

  return `<svg width="100%" viewBox="0 0 ${offset} 49" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="${path}" fill="black"/></svg>`;
}

console.log(expressionToSVG('1 + 2 = 0'));

export default expressionToSVG;
